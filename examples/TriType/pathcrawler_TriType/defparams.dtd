<!--                                                                        -->
<!--                                                                        -->
<!--  This file is part of the Frama-C plug-in 'PathCrawler' (pc).          -->
<!--                                                                        -->
<!--  Copyright (C) 2007-2023                                               -->
<!--    CEA (Commissariat à l'énergie atomique et aux énergies              -->
<!--         alternatives)                                                  -->
<!--                                                                        -->
<!--  All rights reserved.                                                  -->
<!--  Contact CEA LIST for licensing.                                       -->
<!--                                                                        -->
<!--                                                                        -->

<!ELEMENT DefParams (FunTestParams*)>

<!-- One function's data -->
<!ELEMENT FunTestParams (FunName,FunOffset,FileName,Global*,Param*,UQPre*,QPre*,Strategy,CPre?)>

<!ELEMENT FunName (#PCDATA)>
<!ELEMENT FunOffset (#PCDATA)>
<!ELEMENT FileName (#PCDATA)>

<!-- ============= VARIOUS VARIABLES ================ -->

<!ELEMENT Param (VarName, ( PrimitiveType | EnumType | ArrayType | PtrType | StructType | UnionType ) )>
<!ATTLIST Param ItemType  ( primitive | enum | array | ptr | struct | union ) #REQUIRED>
<!ATTLIST Param Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST Param Activate (no) #IMPLIED>

<!ELEMENT Global (VarName,( PrimitiveType | EnumType | ArrayType | PtrType | StructType | UnionType ) )>
<!ATTLIST Global ItemType ( primitive | enum | array | ptr | struct | union ) #REQUIRED>
<!ATTLIST Global Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST Global Activate (no) #IMPLIED>

<!ELEMENT Field (VarName,( PrimitiveType | EnumType | ArrayType | PtrType | StructType | UnionType ) )>
<!ATTLIST Field ItemType  ( primitive | enum | array | ptr | struct | union ) #REQUIRED>
<!ATTLIST Field Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST Field Activate (no) #IMPLIED>

<!ELEMENT VarName (#PCDATA)>

<!-- ============= VARIOUS TYPES ================ -->

<!-- another name for this type (defined by typedef)-->
<!ELEMENT TypedefName (#PCDATA)>

<!-- PrimitiveType contains type name and domain of this element ?,
and another name for this type-->
<!ELEMENT PrimitiveType (TypeName, ElementDom?, TypedefName* )>
<!ATTLIST PrimitiveType Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST PrimitiveType Activate (no) #IMPLIED>

<!-- just primitive type name here : char or int or float etc. -->
<!ELEMENT TypeName (#PCDATA)>

<!-- ArrayType contains type data for a refered element, 
and, as an attribute, number of dimensions of this array,
and another name for this type -->
<!ELEMENT ArrayType ( ( PrimitiveType | EnumType | ArrayType | PtrType | StructType | UnionType ), TypedefName* )>
<!ATTLIST ArrayType NumOfDims CDATA #REQUIRED>
<!ATTLIST ArrayType ArrayDim CDATA #REQUIRED>
<!ATTLIST ArrayType ItemType  ( primitive | enum | array | ptr | struct | union ) #REQUIRED>
<!ATTLIST ArrayType Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST ArrayType Activate (no) #IMPLIED>

<!-- PtrType contains type data for the element it refers to, 
and domain of the size ( dim(p) in Prolog ) 
and another name for this type -->
<!ELEMENT PtrType ( ( PrimitiveType | EnumType | ArrayType | PtrType | StructType | UnionType | StructTypeRec ), SizeDom?, TypedefName* )>
<!ATTLIST PtrType ItemType  ( primitive | enum | array | ptr | struct | union ) #REQUIRED>
<!ATTLIST PtrType Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST PtrType Activate (no) #IMPLIED>

<!-- StructType contains tag name and field data for all fields, 
and domain of the size ( dim(p) in Prolog ) 
and another name for this type -->
<!ELEMENT StructType (TagName, Field+, TypedefName* )>
<!ATTLIST StructType Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST StructType Activate (no) #IMPLIED>
<!ELEMENT StructTypeRec (TagName, TypedefName* )>
<!ATTLIST StructTypeRec Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST StructTypeRec Activate (no) #IMPLIED>

<!ELEMENT TagName (#PCDATA)>


<!-- UnionType contains tag name and field data for all fields, 
and domain of the size ( dim(p) in Prolog ) 
and another name for this type -->
<!ELEMENT UnionType (TagName, Field+, TypedefName* )>
<!ATTLIST UnionType Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST UnionType Activate (no) #IMPLIED>

<!-- EnumType -->
<!ELEMENT EnumType (TagName, EnumDom, TypedefName*)>
<!ATTLIST EnumType Qualifier ( empty | const ) #IMPLIED>
<!ATTLIST EnumType Activate (no) #IMPLIED>

<!-- ============= DOMAINS ================ -->

<!-- domain -->
<!ELEMENT ElementDom ((Interval | Element)+)>
<!ELEMENT SizeDom ((Interval | Element)+)>
<!ELEMENT EnumDom (EnumElement+)>

<!ELEMENT Interval EMPTY>
<!ATTLIST Interval Left CDATA #REQUIRED
                   Right CDATA #REQUIRED>
<!ELEMENT Element EMPTY>
<!ATTLIST Element Number CDATA #REQUIRED>

<!ELEMENT EnumElement EMPTY>
<!ATTLIST EnumElement Number CDATA #REQUIRED>
<!ATTLIST EnumElement EnumItem CDATA #REQUIRED>
<!ATTLIST EnumElement Activate (no) #IMPLIED>

<!-- ============= PRECONDITIONS ================ -->

<!ELEMENT Cond (Operand,Operand)>
<!ATTLIST Cond Operation (inf|infegal|sup|supegal|egal|diff) #REQUIRED>
<!ELEMENT Operand (ExpC,((ExpPIF,AuxPred*)|ErrMsg))>
<!ELEMENT ExpC (#PCDATA)>
<!ELEMENT ExpPIF (#PCDATA)>
<!ELEMENT AuxPred (#PCDATA)>
<!ELEMENT ErrMsg (#PCDATA)>
<!ELEMENT UQPre (Cond)>
<!ELEMENT QPre (UQVar+,Cond*,Operand,Operand)>
<!ATTLIST QPre Operation (inf|infegal|sup|supegal|egal|diff) #REQUIRED>
<!ELEMENT UQVar EMPTY>
<!ATTLIST UQVar Name CDATA #REQUIRED>

<!-- ============= STRATEGY ================ -->

<!-- Strategy: the attribute IterNum defines
OLD:  the value k for the k-path criterion, or 'all' for all-paths criterion.
NEW:  the value k for the k-path criterion, or 'allpath' for all-path criterion, or 'allcond' for condition coverage.-->

<!ELEMENT Strategy EMPTY>
<!ATTLIST Strategy IterNum CDATA #REQUIRED>
<!-- Must be #REQUIRED - check with BB and change -->

<!-- ============= C PRECONDITION ================ -->

<!ELEMENT CPre EMPTY>
<!ATTLIST CPre PreFun CDATA #REQUIRED>
<!ATTLIST CPre Activate (yes|no) #REQUIRED>
